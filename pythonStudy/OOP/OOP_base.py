'''
# python面向对象学习 object-oriented programming
1 面向对象介绍
 1.1 面向过程编程 :将问题分成若干步骤，将这些步骤用函数一一实现，使用的时候一个一个依次调用即可  ---怎么做
 1.2 面向对象编程 :将构成问题的事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为 ---谁来做
2 类和对象的概念
 2.1 类：就是一个模板，模板里可以包含多个函数，这些函数实现某些功能，这些函数称为方法
    2.1.1 类的构成：类的名称：类名、类的属性：一组数据、类的方法：允许对进行操作的方法
 2.2 对象：根据模板创建的实例，通过实例执行类中的方法   
3 定义类和对象
4 实例方法与属性
    4.1 定义：在类的内部，使用def关键字来定义一个函数，这个函数就是一个实例方法，实例方法的第一个参数必须是self
    4.2 属性：类中定义的变量，称为属性
    4.3 实例属性：定义在方法里面使用的self引用的属性称之为实例属性 
5 __init__方法
    5.1  python自带的内置函数，特点是：函数名是固定的，不需要我们自己调用，当使用类名()创建对象的时候，会自动调用__init__方法
    5.2 作用：初始化对象的属性
    5.3 语法：def __init__(self,参数列表):
    5.4 利用传参机制，可以在实例化对象时直接传参，从而完成对实例属性的初始化
6 理解self
    6.1 定义：self是一个形参，代表的是当前对象，哪个对象调用了方法，self就代表哪个对象---self和对象指向同一个内存地址，可以认为self就是对象的引用
    6.2 self只有在类中定义实例方法的时候才有意义，在调用的时候不需要传递实参，python解释器会自动把当前对象传递给self
7 魔术方法
8 案例
'''
#定义类和对象
class Person:
    #姓名
    classname = 'mia'
    #年龄
    age = 18
    # 性别
    sex = '女'
    def __init__(self):
        self.name = 'mia.chen' #实例属性

    def eat(self):
        print('正在吃饭')
    def run(self):
        print('正在跑步')
    def sleep(self):
        print('正在睡觉')
#创建对象
works = Person()
works.name = 'XM'
works.age = 20
works.sex = '男'
print(works.name)
works.eat()
works.run()
# 创建另外一个对象
XW = Person()


'''
函数中级学习
1 局部变量
    1.1概念：在函数内部定义的变量，只能再函数内部使用
    1.2 作用：临时保存数据，需要再函数中声明进行使用，函数执行完成，变量释放
2 全局变量
    2.1 概念：在函数外部定义的变量，可以在函数内部使用
    2.2 区别：作用范围不同
    2.3 优先级：当全局变量和局部变量出现重复定义的时候，程序会优先执行使用函数内部定义的变量
    2.4 当修改全局变量时，需要在函数内部申明全局变量，使用global关键字
3 变量与对象的关系
    3.1 变量：变量是内存中的一个对象，变量是对象的引用
    3.2 对象：对象是内存中的一个实体，对象是由类创建的，对象包含三个要素：id、type、value
    3.3 变量与对象的关系：变量引用对象
    3.4 变量与对象的关系：变量引用对象，变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.5 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.6 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.7 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.8 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.9 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.10 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.11 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.12 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
    3.13 变量与对象的关系：变量可以引用不同类型的对象，变量可以引用不同类型的对象
4 总结 在python中，万物都是对象，在函数调用的时候，实参传递的是就是对象的引用
5 函数的参数传递
    5.1 不可变类型的参数传递
        5.1.1 不可变类型：在内存中创建一个新的对象，修改变量的值，就是让变量指向一个新的对象
        5.1.2 不可变类型的参数传递：不可变类型的参数传递，不会修改实参的值
    5.2 可变类型的参数传递
        5.2.1 可变类型：在内存中创建一个新的对象，修改变量的值，就是让变量指向一个新的对象
        5.2.2 可变类型的参数传递：可变类型的参数传递，会修改实参的值
    5.3 函数的参数传递：不可变类型的参数传递，不会修改实参的值
    5.4 函数的参数传递：可变类型的参数传递，会修改实参的值

'''
age = 18
def test():
    name = 'mia'
    print('{}--{}---{}'.format(name, age, like))
def test2():
    name = 'mia1'
    print(name,end  = '')
    print(age)
    print(like)
    print()
def changeGlobal():
    '''
    修改全局变量
    '''
    global like 
    like = 'learn python'
    global age #声明age为全局变量
    age = 20
changeGlobal()
test()
test2()
a = 2
def func(x):
    print('x对象的地址:{}'.format(id(x)))
    x =1
    print('x对象修改后的地址:{}'.format(id(x)))
print('a对象的地址:{}'.format(id(a)))
func(a)